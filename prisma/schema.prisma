// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================ Start Create Category Table ================
model Category {
  id        String @id @default(cuid())
  createAt  DateTime @default(now())
  title     String
  desc      String
  color     String
  img       String
  slug      String @unique
  products  Product[]
}
// ================ End Create Category Table ================

// ================ Start Create Product Table ================
model Product {
  id          String @id @default(cuid())
  createAt    DateTime @default(now())
  title       String
  desc        String
  img         String?
  price       Decimal
  isFeatured  Boolean @default(false)
  options     Json[]
  catSlug     String
  category    Category @relation(fields: [catSlug], references: [slug])
}
// ================ End Create Product Table ================

// ================ Start Create Order Table ================
model Order {
  id          String @id @default(cuid())
  createAt    DateTime @default(now())
  price       Decimal
  products    Json[]
  status      String
  intent_id   String? @unique
  userEmail   String @unique
  user        User @relation(fields: [userEmail], references: [email])
}
// ================ End Create Order Table ================

// ================ Start Create Account Table ================
model Account {
  id                  String @id @default(cuid())
  userId              String
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String? @db.Text
  access_token        String? @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String? @db.Text
  session_state       String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
// ================ End Create Account Table ================

// ================ Start Create Session Table ================
model Session {
  id    String @id @default(cuid())
  sessionToken  String @unique
  userId        String
  expires       DateTime
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
// ================ End Create Session Table ================

// ================ Start Create User Table ================
model User {
  id              String @id @default(cuid())
  name            String
  email           String @unique
  emailVerified   DateTime?
  image           String?
  isAdmin         Boolean @default(false)
  accounts        Account[]
  sessions        Session[]
  orders          Order[]
}
// ================ End Create User Table ================

// ================ Start Create VerificationToken Table ================
model VerificationToken {
  identifier    String
  token         String @unique
  expires       DateTime
}
// ================ End Create VerificationToken Table ================